#include <iostream>
#include <cstdlib>
using namespace std;
class stack_sll
{   struct node
{
  public: int data;
          node* next;
};
    private: node* head;
    public: 
    int n1;
    stack_sll()
    {
     head=NULL;
    }
   void push(int x)
   {
                 node* temp=new node;
                 temp->data=x;
                 temp->next=NULL;
                 if(head==NULL)
                 {
                     head=temp;
                     temp=NULL;
                 }
                 else
                 {
                     temp->next=head;
                     head=temp;
                 }
   }
   int pop()
   {
       if(head==NULL)
               {
                   cout<<"queue is empty"<<endl;
                   return NULL;
               }
               else
               {   
                   node* ptr=new node;
                   ptr=head;
                   head=ptr->next;
                   return ptr->data;
               }
   }
     void display()
             {
                node* ptr=new node;
                ptr=head;
                if(head==NULL)
                {
                    cout<<"queue is empty"<<endl;
                }
                else
                {   cout<<"your entered queue is"<<endl;
                while(ptr!=NULL)
                {
                    cout<<ptr->data<<" ";
                    ptr=ptr->next;
                }
                }
                cout<<endl;
             }
             bool isempty()
             {
                 if(head==NULL)
                 {
                     return true;
                 }
                 else
                 {
                     return false;
                 }
             }
};
class queue_array
{    public:
    int x=0,y=0,z=0;
    stack_sll s1;
    stack_sll s2;
   
   void enqueue()
    {   
      cout<<"enter the data you want to enqueue"<<endl;
      cin>>x;
      while(!s1.isempty())
      {
          y=s1.pop();
          s2.push(y);
      }
      s1.push(x);
      while(!s2.isempty())
      {
         z=s2.pop();
         s1.push(z);
      }
    }
    void dequeue()
    {    s1.pop();
        if(!s1.isempty())
        {
        cout<<"dequeuing top element from the queue"<<endl;
        }
    }
    void display()
    {  
        s1.display();
    }


};
int main()
{   int n=0;
   queue_array obj;
    int choice,flag=1;
   
 while(flag==1)
 {  cout<<"press 0 for exit"<<endl;
    cout<<"press 1 for displaying queue"<<endl;
    cout<<"press 2 for enqueuing"<<endl;
    cout<<"press 3 for dequeuing"<<endl;
    cin>>choice;
    switch(choice)
    {
        case 0: flag=0;
                break;
        case 1: 
                obj.display();
                break;
        case 2:
            
                obj.enqueue();
                break;
        case 3: 
                obj.dequeue();
                break;
        default: cout<<"invalid input"<<endl;
        
    }
 }
    return 0;
}
